package com.yiran2.entity1.javaClass.javaAbstract;

/**
 * * 酒店中员工、经理、服务员、厨师之间的关系是怎样的？你会与一个员工沟通还是会与一个具体职位的服务员或经理等沟通？
 *
 * 员工父类,定义了其他类的共性内容
 * 		成员变量:工号,姓名,年龄,工资
 * 		成员方法:工作方法(work),父类简单地完成工作方法,声明只要是员工就应该有工作方法的逻辑
 *
 * 经理,服务员,厨师
 *
 * 真正创建对象,使用对象时,我们往往只使用其子类.
 * 对于上边父类中work的这个方法,每个子类都会重写该方法.
 *
 * 通过以上分析发现:
 * 		员工的work方法一定会被子类重写为具体的逻辑,此时可以将该方法定义为抽象方法,仅仅声明有该方法,但是没有具体的方法体,该方法称为抽象方法.
 * 		员工父类通常不应该创建对象,又包含了抽象方法,则该员工类可以定义为抽象类.
 *
 * 抽象相关的具体定义:
 * 	抽象类用来描述一种类型应该具备的基本特征与功能，具体如何去完成这些行为由子类通过方法重写来完成
 * 	抽象方法指只有功能声明，没有功能主体实现的方法
 * 	具有抽象方法的类一定为抽象类
 *
 * 抽象定义关键字:abstract
 * 抽象类不能创建对象.
 *
 * 抽象类也有构造方法   从这里就可以看出，创建子类对象时，调用了父类的构造方法，但是并没有创建父类的对象
 *
 * 抽象父类的构造方法,可以完成类似为成员变量赋值的动作,从而这些成员变量可以被子类对象使用.
 * */

public class AbstractTest1 {
    public static void main(String[] args){
        // 不可创建父类对象，因为该类为抽象类
        // AbstractEmployee ab = new AbstractEmployee();

        // 创建具体的子类对象
        AbstractWaiter gel = new AbstractWaiter();
        gel.setName("杨逸晨");
        // 调用子类重写的父类抽象方法
        gel.work();

        // 创建另一个子类对象
        AbstractWaiter paojie = new AbstractWaiter("炮姐");
        paojie.work();
    }
}
