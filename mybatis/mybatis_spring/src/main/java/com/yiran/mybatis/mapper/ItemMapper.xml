<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yiran.mybatis.mapper.ItemMapper">
    <!-- 表示开启二级缓存 -->
    <!--
        映射文件所有的select 语句会被缓存
        映射文件的所有的insert、update和delete语句会刷新缓存
        缓存会使用默认的Least Recently Used（LRU，最近最少使用原则）的算法来回收缓存空间
        根据时间表，比如No Flush Interval，（CNFI，没有刷新间隔），缓存不会以任何时间顺序来刷新
        缓存会存储列表集合或对象（无论查询方法返回什么）的1024个引用
        缓存会被视为是read/write（可读/可写）的缓存，意味着对象检索不是共享的，而且可以很安全的被调用者修改，不干扰其他调用者或县城所作的潜在修改

        eviction：缓存回收策略
        - LRU：最少使用原则，移除最长时间不使用的对象
        - FIFO：先进先出原则，按照对象进入缓存顺序进行回收
        - SOFT：软引用，移除基于垃圾回收器状态和软引用规则的对象
        - WEAK：弱引用，更积极的移除移除基于垃圾回收器状态和弱引用规则的对象
        flushInterval：刷新时间间隔，单位为毫秒，这里配置的100毫秒。如果不配置，那么只有在进行数据库修改操作才会被动刷新缓存区
        size：引用额数目，代表缓存最多可以存储的对象个数
        readOnly：是否只读，如果为true，则所有相同的sql语句返回的是同一个对象（有助于提高性能，但并发操作同一条数据时，可能不安全），如果设置为false，则相同的sql，后面访问的是cache的clone副本。
     -->
    <cache />
    <!--
    useCache配置
        如果一条语句每次都需要最新的数据，就意味着每次都需要从数据库中查询数据，可以把这个属性设置为false，如：
        <select id="selectAll" resultMap="BaseResultMap" useCache="false">
    -->
    <select id="queryItems" resultType="item">
        select * from item
    </select>

    <!--
    刷新缓存（就是清空缓存）
        ​ 二级缓存默认会在insert、update、delete操作后刷新缓存，可以手动配置不更新缓存，如下：
          <update id="updateById" parameterType="User" flushCache="false" />
    -->
    <insert id="insertItem" parameterType="item">
        insert into item (itemName, itemPrice, itemInfo) value(#{itemName},#{itemPrice},#{itemInfo})
    </insert>

</mapper>